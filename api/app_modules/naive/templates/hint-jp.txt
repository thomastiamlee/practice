declare
-To declare a variable, write the data type followed by the name. Make sure the name is unique. Example:[LB]`int x;``

assignment
-変数に値を代入するには、 `=``演算子を使います。 Example:[LB]`s = a;``

addition
-2つの値の和を求めるには、 `+``演算子を使います。 その計算結果は変数に格納することができます。 Example:[LB]`s = a + b;``

subtraction
-2つの値の差を求めるには、 `-``演算子を使います。 その計算結果は変数に格納することができます。 Example:[LB]`s = a - b;``

multiplication
-2つの値の積を求めるには、 `*``演算子を使います。 その計算結果は変数に格納することができます。 Example:[LB]`s = a * b;``

division
-2つの値の商を求めるには、 `/``演算子を使います。 その計算結果は変数に格納することができます。 Example:[LB]`s = a / b;``[LB]`/``演算子は、変数が整数の場合、余りを無視します。

modulo
-剰余を求めるには、 `%``演算子を使います。 その計算結果は変数に格納することができます。 Example:[LB]`s = a % b;``[LB]`％``演算子は2つの整数の割り算ですが、商ではなく余りが得られます。

equal
-2つの値を比較し同じ値かどうか求めるには、`if``構文と`==`演算子を用います。 Example:[LB]`if (a == b) {``[LB]`  // case if true``[LB]`} else {``[LB]`  // case if false``[LB]`}``

notequal
-2つの値を比較し違う値かどうか求めるには、`if``構文と`!=`演算子を用います。 Example:[LB]`if (a != b) {``[LB]`  // case if true``[LB]`} else {``[LB]`  // case if false``[LB]`}``

greater
-2つの値を比較し〜より大きいかどうかを求めるには、`if``構文と`>`演算子を用います。 Example:[LB]`if (a > b) {``[LB]`  // case if true``[LB]`} else {``[LB]`  // case if false``[LB]`}``

less
-2つの値を比較し~より小さいかどうかを求めるには、`if``構文と`<`演算子を用います。 Example:[LB]`if (a < b) {``[LB]`  // case if true``[LB]`} else {``[LB]`  // case if false``[LB]`}``

greaterequal
-2つの値を比較し〜以上かどうかを求めるには、`if``構文と`>=`演算子を用います。 Example:[LB]`if (a >= b) {``[LB]`  // case if true``[LB]`} else {``[LB]`  // case if false``[LB]`}``

lessequal
-2つの値を比較し〜以下かどうかを求めるには、`if``構文と`<=`演算子を用います。 Example:[LB]`if (a <= b) {``[LB]`  // case if true``[LB]`} else {``[LB]`  // case if false``[LB]`}``

return
-値を返す時は`return``を使います。

looparray
-配列の各要素をループさせるためには、`for``ループを使うことができます。このループでは、iが0から始まります。各ループでは、`i``を配列の最後まで`1``づつインクリメント(足す)していきます。 Example:[LB]`for (int i = 0; i < arr.length; i++) {``[LB]`  // write your code here``[LB]`}``[LB]配列の最初の要素は、0から数えます。

whileequal
-条件が真である間、繰り返し何らかの処理を実行するには、`while``文を使うことができます。 Example:[LB]`while (a == b) {``[LB]`  // do while true``[LB]`}``
